using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace AdventOfCode24.Days
{
    internal class Day4
    {
        public string InputStr = "MXMXMAMXAXMSMMMSSSXSSSMXXMSSXSMSASXSMXSAMXSMMMSMSMMSSXMSMSMSMMMSSMAAXSAMXSMSSMASAMMMSAMXSSSSSSSSXSAXMMMAXMMSSXMASXXSAXSXXAMXSSMSXMSAMXMAMAMX\r\nSMMAMXMSAMXAAAAAXMAMXAMAASAMSXXXAXAXAASAMAAAAAAXMAAAMAMXAAMAAAAAAMMXMSXMASAAAMXMAMAMSAMXXAMAAAAAXMAMSASMXSAASASAXMAMXMASMASASAMXASXMSMSMSSSM\r\nAMSMSMXXAAXXSMSSMMAMSXMASMASAMXMMMMMMMXAMASMMSSSSMMSSMMMSMSSSMMSSMXAASXMASMSMMASMMXXXMASMAMSMMMMMMXMSASMAMMSSXMSXMXMAMAMSAMXSAMSXMAMAAAAAAAA\r\nMMMAAAMMSSSMXAXMAXAMXMXSAMXMAMSAAAAASMSSMMAAAAAAAMAMAMAAAAXMAMAMXMSMXSASMXXMASASAMXMASASMSMMAXXXMASMMMMMAASAXXXXMSAMASAXMXSXMAXMASXXASMSMMMS\r\nXMMSMMAXAAAASAMASMMSMSMMMSSSXMAMXMMMSAAXAMXMMMSMMMASAMMMSSMXXMXXAXAMXSAMXXASAMXSAMAMMMMSAMASMMSMXMAXAAXMASMMMMSSMSASASMSMAMMAMMMAAMSMMAMXXXX\r\nMXMXMASMMSMMMAMAMAAXAAAMAAMXMSSSSXSAXMASXMAXXAXXXXXMMSSXMAXAASMSMSASAMAMAMXMMMXSXSAMMMAMAMAMMAAASMMSSSSMXMASMMAAXSAMXSAXMAMAAXSAMXAAXMAMXXMS\r\nAAMXMMXAXMAMSAMXSMMMSMSMMMSAMMXAAASAMXMMASXSMMSXASAMXAMASAMXMMAAXXMMXSAMXSAAASMMMSMMAMASMMASMSSSXAAAAAXMASAMAMSSMMXMXMXMMSSSSSMXSMSMMSAMMXMX\r\nSXSAMSSSMSXMSASAXAXXAXXXMASASXMSMXMAXXAXXMMSAASMMMSSMSXMMXMMMMSMSMSSMSASXSMSMSASMSMMMSAMAXAAXAMMXMMMMMMSAMXSXMMAXSAMXMASXMAXXXXAXXAMXSSXSAMA\r\nMAMMSAAMAXSAMXMASMXSAMXMMASMMMAMXSMSMSMMSAASMMMAXMAMXAMSASMSAAMAAMAAXMAMAMAMXSAMASAAXMXSAMMMMMSSSXXMASAXSSMMAMSAMXAMXSAMAMXMMSMSSSMMXMAMSASM\r\nXAMXMMSMSMXMASXAXXAMASXAXAXASMSMSAAAAXMASMMMXSSSMMASXMASAMASMSMXMMSSMMXMAMMXMMMMAMXMSAMXXSAXMAAAXMSXMAASASAXAMMASMMMMMMXXSAAAAAAMXSAAXSMSXMM\r\nXMXXXXAAXXXMAMMMSMXSAMASMMSASAMXSMXMXMSMMASXAMAMXSASMXAMAMXMXAXXMAMAXAXSSMSXAAAMXSXMMMMMASASAMMSMMMAXXMMASXMSXSAMAAXMASAAAMSSMSMMAMMSMXASAMX\r\nXSASMSMSMSMMAMAMXAAMASAMSXAXMAMAMXMAXXXMMAMMMSAMXMASMMXMMSSXSSSXMAMAMMMMAAXMMXXSAMASAMXSASAMMAXMXSAMMSXMAMAXXAMXSSMMSAMMSMXXMXMXMASAMAMXMAXX\r\nXAAMAAAAAXXMASMSMMMSAMASMMSXSAMAMAASXMAMMAMAXSMSXMXMMMMSAMXAXAMXSSXSASASMMMMSSMMASAMSXXMAMMMXSMSASASAXAMXSMMMXMAMASAMXSXXXMMAAMAXAMMXXAMSSMS\r\nSMSMSSSMSMSMASMAAAAMASXMMAMASASXXXMXASXMSAMSAMASMMMAAAXMAMMAXXMAXXAMXMASXAXMAAXSAMXXMSXMXMAMAMAMASXMXSXSMMXAAAMMSAMXSXSAMAMAMSSXMMSSSMSXMMAA\r\nXXXAAAMXMAAMSMMXMMXSMMAAMXSASMMMSSSSXMMXMAMMAMXXAASMMXSSXMAMAXMXSMMMAMXMMASMSSMXXMXAMXSAMSMSSMSMMMMMAMMMAXSMSXSAMMMXSMSAMAXSMAXAXSAAAAXAAMSM\r\nSSMMMMMAMMMMXAASAMXXXSMMMMMMSXXXAAXMAXMAXSMXSMXMMMSAAAMXMMSSMMXMAXXMAXMAMXAXMAMMSMMASAMXASXAMAMMAAAXAAAMSMSXMAXMXMSXMASAMXMXMASMMMMSMMMSXMMX\r\nSAMMSMSMSSSMMSMXMAAMXMSMAAMAMXMMMSMMMMSSSXSAXMMMAAMMMMXAXAAAAXMSAMMSASAXSSMXSMSAAXAMMMMXSXMXXAAXXXMSMSMMAAXAMMMSAMXAMXMXMXAXMASXSXXXAMAXAXMM\r\nSMMXAAAAXAASAMXASMSMMAASMSSSXAASAAMAAAXXAAMXMAASMMSAMSSMMMSSMMMMAMAMAXMAAAMMSAMMMSSXAMSMMSSXSSSSMMXAMXXXMXMXAAASASXXMXSAMXSAMXSAMXXSAMASMMSS\r\nMXSSMMMSMSMMXSSMSAAXMSMSXAAXMSSMMSSSSSMMMMMAMSMSAASAMXAXMXAAAAXSAMMSSMXMSXSAMMMMMSASXMAAMAMMAAAAASXMSXMASXMSSMMSAMXAAAXASAMASAMAMMMSAMMXMAAA\r\nXAXAAASXMXAMSAMXMMMMMAAXMMMMAMAXAMMAAAMMXAXAXXAMMMSAMXMMMMMSMMMSASAAAMXAMXMMMXAMXSASMSXSMASAMMMMMMAXSAMMMAAXXSAMXMXAMXXXMASAMMSSMMAXSMAXMMSS\r\nMASMMMSAMXAMMMSAMXXAMMMMXSAMXSAMSSMMSMMASMSSSMSMXXXMASXAMAAXASASXMMXSMASXSSSMSMMAMAMXSAAXXSMXXSSSSSMMSSMSMMMSMXXAXSSSMSSSMMMSXAAXMMSMMMMXMAX\r\nSASAMXSAMSSMAASAMSASXSMXAMXMXMMAAXMMMMMXMAAXMAXASXMMXXSSSMMSAMAMMASAXXAAASAAMASMMMMMAMAMAXSXSXSAMAMAMAXMASASAMMSSMAASMAAASXSSMXSXXXAXAAMXMMM\r\nMASXMASAMAMSMMSXMXAMASAMMMSMMMMMMMXAAAMAMMMMMSMAMAASXMAXAAAMXMAMMAMMSMXMXMSMMASXXAXMASASMMMAMSMAMXMAMSSSXXXMAXMAAMMMMMMSMMSAMXMMXMSXXSSXASAM\r\nMAMAMMSSMAMSMMXMMMSMAMMXMASAMXAASXSMSSSMXMXMMAMASMMMAAMSMMMMASMSMXSMXMAMSMXSMXSXSXMSXSAMAAMXMASXMXSXMXAMAMSSXMMSMMXXAXXAXMMXMAAMAXASMMMMAXAS\r\nMSXSMXMXSSMSAMSAXSAMXMXXMASAMSSXSAXAAMAXXAMXXXSXSAMXXSMAAMXSASMAMSXXAXAMXAAMMMMXXAMSAMXSSMSMXAXMAMAMXMAMXMMAXXAXMSSMSMSMSMMMSMSSMMASXAAAMSMM\r\nXMAMXSMAMXASAMSMMSASMXSXMASMMMMAMMMMMSXMASXXSASXMASMMMXSSMMAASXSMSASMSSMAMMSAASMMMMSAMXAMAMMMSSSMSMMXSMMXMXAMMSMAAAAAAAMAMAXAMMAAMSMXMSMMAAA\r\nXMAXAXMASMMMSMSSXSAMXXMAXAMMAXMXAXMSMAMAXMAAMAMAMAAAAAAMAMAMXSAMAMAMMAXXAMAXXMXAAXASAMXMXMXAMMAXASAMXSAXAMAXMXAMMMSSMSMXAMMMAXSSMMAAAXAAMSSM\r\nXMXMSMSMSAMAMXMXMSASMSSMMSSSMSMSMMMAXMASMMMMMMSAMSSSMSXXAXMXAMAMXMAXMAXSSSXSSSMXSMXSAMMXAMXSMMAMXMAXASASASMSSXXSAAXAMXXMSMMSMMXMMMMXMSSSMAAA\r\nXAMSAAAXSXMASAMAAMAMAMXXAAMAAAXAASXXSMMXAAXXMAMXXXMAXAMSMSMMASAMXMSSMMMAAMASAAMAMXMXAMAMASMAXMASXXXMXSAAAXMAXASXMMSMMASXMAAAASXMMMSAAXAMXMMM\r\nMSMXMMMXSMSASASAXMAMAMMMMMSMSMSSSMMSMAMSXMXAMXXSAMXXXMXAAAXAMMXSXAAAAXMMMMSMSMMAMASXMMMXAMMMMMSMMSMMMMMMMMMSSMMSAMMAMASASAMSSMASAAAMXMMMMXXX\r\nAMAMSASMXAMXXAMASXASASASMXAXAAXXAAMMMAMXAMXSSSMMASXMMXSMSMMMASAMMMSSMXXAXXXAMXMASMMAASXSMMSXMXAAMAAAXSAMXAAXXXAXMMXAMAMMMMAMXXAMMSMMAAAXXXMS\r\nSMMASASMMMMSMAMAMMMSXMXAXMAXMSMSSMMSSSSSSMAXAAASAMAAMXXAAAMMMMASAAMAMMSMSMMMMXSAXXMXMMXAAAMASMSSMSSMSMMSSMSASMMSASMMMXMASXMASMSAAMASXSXMASXS\r\nXAXMMXMASAAAAAMMSMAMMMMMMSSMXAAXAAXMAMAAXMMMXMMMASXSMMMMMXSAXSSMMSSSMAMMAAASAXMASXMSASXSMMMAMXAXXMAMXXAXXXMAAMAMMSAXAXMASXAMAMXMXSAAAMASXMAS\r\nSMMXXAMASXSSSMXAAMMSAXAXMAAXSXMSMMMMAMMMMAAAASASAMAAXAAXAAXMXXMSXXAXMASMSSMSXSMAMAASAMXMAMMSSSMSXSAXSMMSXXMMMAAXXSXMSMSMSAXSXSMSAMMSASMSAMAS\r\nXMAMMSMASMMAXAMSSSXSXSXMMSSMMMXSAMASXSAMSSXSASASMMSMMSSMMMSXMASMXXMSMMSAMMAMXMMSXMMMAMAMAMXAAAAAASMMMAMMMMMMXSMSAMXMAAAAMAMAAMASMSAXXSXSAMAS\r\nMMASAXMXSAMAMMXMAMAMASMXAXAAXMAMAAASXSAXXAAMAMXMAAXAAAXMAMXAXSAMMSXAMSMMMMSAMXAXAXXXXSMSSSMMSMXMXMMXXAMAAMMSMAMSASAMMMMMMAAXXMAMXMASAMASMMAS\r\nASASMXXAMXMAMXXMXMSMAMAMXSXMMMXSMMMXMSMMSMXMAMAMMSSMMSMSSSSMMXMXAMMMXXAXAAAAMMASMMSMMAXXMAXXAMSMMAAASMSSXSAAXSAXAMXXMXSASMSSXMXXAMXMAMAMAMAS\r\nMMAXXXMMSMSMSMMXXXAMAXMAMMAXAAXAXXXAAMAAXXSMMXXXAMMAMAASXAAMXMXMMSAXMSSMMSSMMMAAAXAASMMMSMMSASMASMMMSAAAAMMSMMXMSMSMSASASAAAXXSSMSSSXMASXMAM\r\nXMASMMSXAXAMAAAMMMMSASMXAXAMXSAMXMSASXMMSMSAMASMMSXAMMSSMXMMXMASASMSXAAAXMAMXMXSAMSXMAAAAAAMXMMMMXXXMMMMMMXMAMXSAAAAMAMAMMMSMXAAAXXAMSXMXMAS\r\nXMMSAAAAMSMSSMMAAAXMXSASMSAMXAMSAAMAXAXXAAXAMAMAAXXMSXXMAXSAXSAMXSAMXXSMMXAMXMAXAMMMSSMSSSXMASAMMXAMXASMMSASMMXAMMMSMAMXMMAAMASMMMSSMSAMASAS\r\nXMAMMMMSXMMAMASXMSXMXMAMAAXMASAXAXSAXAMSXSMMMSMSMMASAXMMSMXAMMSSMMMMMXMASMASXMASAMXAAXMAXMAMAMAXMMMMSMSMASXXAMXXXAXAMXSAXMXMSAMXSAAAXSAMXXMS\r\nAMASAAXXAMAXMAMAAXMMSMSMMMSXXMXMSMMMXAAXXXASMMAMXAXSASMAMAMXMAXXASAAXAXAMSXMXMASAMMMSSMSMSXMSSSMMSAAAASMMMMXAMMMSAMXMMMMSMSMMASAMMSMMMAMXAXS\r\nMSXSMSXSAMMMMSSMMMAAAMAXXXMMXMXAAAAMSSSMMSAMAMAMXSXXAMMASAMMMXSAMSSXMAXSMMXSXMASMMMAMMAXMMXXXAAAASMSMXSAXAMXXSAAXMSXSAXXAAAXSAMXSXMASXSMSMMX\r\nMMAMXMASXMXAAAAAASMMXSMMXXSAAXAMSXMMAAAXAMMMAMAMMMAMMMXAXXXAMAXXXXAMMSMXAMMMAXAMXMMXSMAMASMMMSMMMSMXXSMXMMSAASMSMAAAXMXSMMMMXXMASAXXMAAMAMSM\r\nMMAMMMAMMXSMSSMMMXXAASXSAASMSXMMMXMMMMMMSSMSMSXSAMXXAAMXSSXSMSSMSMAMAMASMMSSMMXMAMSAMMXXAMAAXMSAMXMMMSMASAMMMMAXAMMMMXMXAAMAMXMMSAMSMSMMAAMA\r\nXMASAMAMMMMMMMMMMMMMMSAMMXMMMMSAAAMASAXMMAASAAAXAXSMSSSXAMAXAXAMASAMXSMXMAXAXMASMXASXASMMSSSMMXMXXMAAXXAMXMMASXXSXSMSSMSSXSAMXMMMMMSAMXSMSXS\r\nSSMSXSAXXAAXAAAMASAAAMAMMXXMAAMMSMSASXSXMMMMMMSSSMSAXAMMAMMMMMMXAMMSMMMAMSMXMSASXSMAMAXAAAAAASMSMASMSSMMXSASAXMAAMMMAAAAAMXAMXAAAAAMAMAXAMMM\r\nXAMMXSASMSMSMSMSASXMXSMSSMAMMMSAXXMMSAMXMSXSAXMAMAMMMAMSXSMXMASMMSAAAAMAMMXSXMAXAAXMAMXMMXMMMMAAAXXMAAAAAMXMXSMSMSAMSMMMSMSSMMMSSMSMSMSMMMMM\r\nSMMMAXMAMMMAXMAMMSXSASAAASXMAXMXMMMAMAMXMXAMAMMAMAXMSXMMMMMASXSAXMXSSMSSSMAMAMAMXMMXSAASMSSXXSSMMMMMMXMMSMXMAMAAXMXMAMXMAMAMXAAXXAXMMAMAXSAS\r\nAXXMAMAMASMMSMXMXMAAAXMSMMMMMMMXMASMSASAMMSMAMSXSXSMXMXMAAXMXMMMSMAMAAAAAMAMSMMSMASAAMMSAAXXXMAMXSXAMXSXXMAMASMSSSSSMMASMMSSSMXSMMMXMAMMASAS\r\nSMSMSMSMASAXMMMSAMXMMMXXAAAASASASXSXSASMSAMMAMXAXXSXAAASMSSSSXMAMMAMSMASXMASAAAAMAMXSXAMMMSXMSAMASMXSAMAMXAMXSXAAAAMMXAXAAAMXSASAMASMXSMMMAM\r\nXAXAAAAMSSMMXAAXAMXAXXAXSMSMSASASASXMAMXMASXMXXXAMMASMMXAXAMMAMSXSAXXXXAAXSAXMMSMMMAXAMXAXMAXSXMASMMMMSAXSXSXMMMMMMMMMSSMMMSAMXSXMASMAAXXMAM\r\nMAMMMSMSAMAMSMMSAMSSMMMXAMXMMMMMMAMAXASXMXMAMSAMXAAAMXMMSMSMSAMAAXMASXXSMMMMXXXXXMSSMMXXMMMSMMASMXXXAXMAMSAMXXAXAAMMMAMAAMAMASXSMSSXMSMMXMAS\r\nAAXAAMXMAMAMAAAMXXAAAAXXSMXAMXSMSSSMMAMXXMSAMXMMASMXSAMXMAMXSSSMMSXMMAAXMAAMXSMMMXXMASMASAMAAMAMXAMMSMMSSXAMMSXXSMSAMXSSMMASXMASAXMAXMXAXSMX\r\nSMXSSSMSAMSSMSMSMMSSMSXSASAMXAXMAAAAMAXSSMMAMMSMXMXASMXMMAMXMAXXASMSSMMMSSSMASAAMSASXMXAXASXMMASMAMAMXAXAMAMXSAAXASMSAMXMSMSAMAMAMSMMXMMMASX\r\nASXXAXAMXMXAMXMAAAMXAAMSAMXXMXMMMXMXMMMXAMSSMAAXXMMASMSMMAMAMXMMMSAXAXAMAXAMASASXSMMAXMASMMMXSASMSMASMMMMSMXAMMMMAMXMASXMAASMMMSMXAMMAAXSAMS\r\nSXSMAMMXXMSMMMXMMSAMMMXMMMMMMAASAMXXMXSSMMAMMSMXAXMXMAAMSSSMSAXXXMMMSSXSSSMMMSXMXSASMMSMXXASXSAXAAMXMAXAXAXMSSMXMAMAXAMMSMXMMAAAXSASXXSXMAMX\r\nXAAMAMXSMMMMAMXSAMAXAXAAAAAAMXMMASMAXSMAXMASMAASMXMXMSMMAAAASMMAXAMXMSAXAXAAXMASASXMAMASAMXMMMAMSMSAMXAMSMSXMAMSSSSXSAMXSMSASMSAXSMSAAMASAMM\r\nMXMAXSAMAAAMASXMASMMMSMXSSSSMAXSAMMSMAXAMMAXXMAXAAMXMXXMMSMMXSSSSXSAAXMMMSSMSMMMMMMSMSMMXXSMXMSMMAXXXAMXAXAMSAMXAAAMSAMXSASXMAMMMMASMAMAMASA\r\nMAXXXMAXSXSSMSAMXMAXMAMAAXMAXMMXXMAMSMMMSXSSXSXXSSMMSSMXMAXAXMMAAASMMMXMXMAAAXXMAAAAXMXSMMMSAMXMMMMSXSXSMSMMXSMMSMXMSSMAMAMXSMXAXMAMMXMASXMM\r\nSSSMMMSMMAAMMMMMAXMXSASMSMSASMMXSASXSMAXXAMMAMMXMAAXAMMAXMMSMSAMMMMMAMAMASMMMMMSSMSXSMAAAMMAMXXAMXXXAMAAXAAMAMMAXXXXMAMXSXMAMXXMMMMSMSMMXXAA\r\nXAXMSAMAMMMSXMASMSXXMASAMAMASASMSAMMMMSSMAMMAMMAMSMMSSSMSSXMAXAMXXASMSMSASXMAXXAMXAASMSSSMMSSSMAMXAMAMSMMSSMAXMASXMAXMMMMAMXMAAXAMXAMAAMSMMM\r\nMXMAMASMMSAAASMMMSMXMAMXMAMASMAAMAMAMAAAMAMSAMSAXAXXAAAMAMMMSMAAXXXSXAAMASMSSSMMSMMSMAAAMAMMAMXAMMMSAMXAXAXXMMMASAAXXSASMSMMSSXSASMSSSXMAAAM\r\nMSMMXMMAAMMMXMMAAMXAMAMAMXMAXXMMSXMSMMSSMXXMAXSMMASXMSMMASAAAMMMSMSMMMMMMMXMAAXAAASXMMMMMAMMAMSASXAMXXAXMMSXMAMSSMSAMSASAXAXAAAMAMAXMAXSSSSS\r\nAAAXSXMMMMMMSASMMXMSMXMAMAMSSMXMSMAAMXAMMXMMSMMMSAMMMMXSASMMSSMAAXAASXXSASAMXMMSSMMAXXMSMMXSAMXXAMXMSAMXAXMASXMMSMMAAMAMAMSMMSMSSMXMMAMMAMAM\r\nSSSMAXXSXSXASAMXSSMMASXMMAMAAAXAMMSMSXSSXSAAMAAMMSMAXMASAXASXAMSSXXAMXASASAXSAMXMASMMMAMMMMMMSXASXSXAAAXAMXMXSAAXXXMMMXMAMXAXXAAXXXXMASMAMAM\r\nXAAXMXAXAAMMSMSAAAAMAMASXSMSSMMXSXMXAMXXAXMSSMMSAMMSMAMMSMXAMMMMAMXSAMMMXMAMMXMAMMASAMAXSXMAAXXMMAMXSMMXSMSXAXMMMMXMASMSMSXMMMMMSSMMMXXMXMAS\r\nSSSMXMSAMXMXMAMXSMMMAMAMXAAAAXAXSASXXMSMMMXXXAXMMMAAAXAAXXXMSXMSMSMXASXMSMAMXSMSMSASXMASXASMMSMMMSMMXMXAMXAMMSMSASXSMSAASXXAAXMSAXAAMSMXMAXX\r\nXMAXXAMASAAAMMMMXMMMSMSSSMMSMMXXMAMXMAAAXXSXMMSMSMSSSXMMMSXXAAMAAAAMXMAAASASXMAMAMAMAMXAXMMAASMAAMXSASMAXASAMAAMAMMAMXXXSXMSASXMASXMMSAXSAMX\r\nXSAMXMSAMXSASXSSXSAAMAAAXXAXXSXXMXMAAMSXSXMAMSAAAMAMXXMAMMMSSSMMSMSMXSMMMXXSAMXMAMMMSAMXSXSMMMMMMSASASMSAMXAXMSMMMSMMAMMMMAMAMXMXMMMXMAMAAMS\r\nMMXAMAMMMMXXXAMXAXMMMMMMMMXSAMASMMXMSXMAXMXAXXMMMSXMSMSASMAMAXMXMAXMXXMXXMXMXMAMXMAXMAMAMXSAMSMSAMASAXAMXMMSMXAAXAMXMAMAAAMMAMXXMAXSAMMMSMMX\r\nAAASXXXAAMMSMAMMMMSASXMSXSAMAMAAAXSXXAMAMMMMXXXSMMXAAAMASMSMAMMSMAMXSAMSSMMSMSSSMXMMSAMXSASAMAAMXSAMXMXMASAXXSMSMAXAMSSSSSXSSSXSXMXMXSXAXXXM\r\nXSXXAAMSMSAAMSMSXAMAMAAAXMASXMSSSMAAMMSMMXASAXAMAASXMSMSXMAMSSXMMSMXMASAAAAAMAMXAASXSSMAMASXMMSMAAAXMMXXXMASAXAXMMMMMMAXAMAXAMMXAMXSXXMSMMMS\r\nAXMMMMMAAMMSMMAMMSSSSMMMMXAMXXMAXAMXMAAAAXAMXXMSMMMASXXMAMXMAMXMAXXXSMMMSMMSMSXMXXSAMXXAMAMAXMAMSSMMASMSMSMSAMXMASASASAMMMMMAMAMAMXAAMAMASAS\r\nAMAAMASMSMAMMMAMXMAXAXXXAMSSMMMMXSXMMSSSMMMSMMXAMASMMXSSMMAMMSXMASMXMAAXXAXXAXMSXXMASMSXSASMMXMXMAMSXXAAXXASXAXSXMASAXXXXAAXSMSAXXXXMMASXMAS\r\nXSSMSASXAMASASAMAMXMSMMMMSXAXMAMMMSAAMAXXAAAAXSASXSXMAMAASXXXSXSXXAASMMMMSXMAMAAXMMMAMSXSMAMAASMSAMSMMMMSXAMMSMMAMMMMMMMMSMSAAMMSMSMXMXXXMAM\r\nXMXAMASMMMMSASMSAXAAASXAXMMMMSSMSAAMXMASXMSXXMMMMAMMMMXSMMXSASMSAXSAMXAXAMMAAMMMXSASAXMAXMAMSASASXMXMSAAAMMMXAASAMSAXXAAAMMAMXMAAAXAXMMMXAXM\r\nXSAMMMMMXSMMMMASASXSMAXSMMAXMXMAMXSSSMASXMXMSSSXMAMXAMXASAXMAMAXAMXSSXMMASXSXSMXSAASASXSSSSMMAMAMMSAASMSXMASXMXSMSMAMSSMSXSXXAMSMXSXMXAMMMSM\r\nMAMXASAMXAAAMMMMAMXAXMAMASASAAMXMAXAAMXMASXAAAMASXXSAMMAMMSMAMXMSMXXMXMSXMAMAMXXAMXMXMMAAAMAXXMXMXSMMMXAAXASASAXXXXAMXMAXXAAMAMAMXMASXMSAAAX\r\nMASXXSASXSMMSASMMMSXMXXSAMASXXMAMXMXMMMSMMMMMSMMXAMMMSMXMAMMMSMMXAMXMMXAMMMMAMSXMXSXAXMMMMMXMMSMSAXMAAMSSMASMMMXMMSASXSASXMSSSSSSXSAMAASMSMS\r\nSAMXXSAMAXAASXSAMASAMXMMAMXMAXMAMMSMAMAAASMMAAMXXMXAAXMSMMMAXSXAMAMAMXAMSAXXAMXAMASXMMAAMASXMXAAMXSSSSMAAMMMMAMXSASMMXMASAXAAXXAAAMXMMMXAMMS\r\nMMSMXMMMAMMMMMSXMASMSAMXSMMSAXMAMAAXMAXXXXAMSSSMSASMSSXMAASXMSMASAXXSXMMSXXSMMSAMASAXASMSASMSAMXMXXXMAMMSMAASXSAMXSAXSMASXMMSMMMMMMMXSMMXMAX\r\nMMAAAXAMAXXXAXXXMXSXSAXXAMXMAXSAMXMAXAMXSSMMAAAAAMXAAXAXMASAAXAAMXSSMMXMMSMAAXMMMSSMMXMXMASAMASAMMMMSSMMAMMXMMMAXMSAMXMASAXAAAMXAXSMAMAMMMXM\r\nSSSSMSMMSMMMMMMMMXMASAMSSMXMAMMXXMASMASAAAXMASMMXXMMMSSMSAMMMMSASMMAAAXAAAXXMMAXMXMAMSSSMMMXMASASXXAAAASMMSAAXSAMXMSSXMXSAMSMSSXMSMMASAMXXXX\r\nAXAAAXAAXASXSMSASAMXMAMAAMAMXSXMSMAMMAMMSMSAMXMSXMMSMAMAMASXMAMAAAMSXMSMSSMSASXMAASAMAXAXAAXMASAMMMMMSAMAASMSMMXSAAXMASMXXMAMMAMMAMSAMASAMMM\r\nMMSMMMMMSAMASASXSSSXSSMMMSAMAXAMAMAMMASXMMMMXAXMAMAAMAXMMXMXMASMSSMXAMMMAAASAMMMSMSXSMSMMMXSMXMAMXAAAMAMMMSXMXXASMSMSMMXMMSMSMAMSAMMMSMMAXMA\r\nXAMXXAAAMAMXMAMMMAMXMAAXASAXSSSSMSASXMSAAXAXXMSSMMSSSSSMASMMMAXXAAXSXMAMMSMMSMXAAXXMSXSMAXMMMSMMSSMSSSSMMXSAMXMMSAXAAXMAAXAXXXAMMXMMAAXSASAM\r\nMSSSMSMSSXMAMXMAMAMAMMMMMSAXMAAAAXXXAASXMMMSMAAAAAAMMAAXMSAAXASMSMMSMXXSAMMAMXMSSMSXSAMXXXAAAAAAXAAAXMAAAAMAMMASMAMXMSSMSSMSMMSSXSMMSSXMASMS\r\nAXAMAAAMXASXSASMMASMMSASMMMMMAMMMXSXMMMXSAAAMMMSMMSSMSMMXSXMSXSAMXSXSXXMASAXXMAMAASMMSMSSMSSSSMMSMMMSSSMMXSAMAMMMAMASXXXAAMAAXAMXMAAAXXMAMXA\r\nMMAMSMSMAMMMXASXSMSAASXSAASAMXMAXSMSMXMASMSSXSAMXMAMAAXMXMAXSXMAMMMAMMMMMMMXMXSMMMMAAAMAAMAMAXMXAAXSMMAAXXSMXSAMSSSXSASMSMSSSMASXSMMSMMMAXSX\r\nXMAMXXXMAMAXMXMAAXMMMMASMMMMXMXXSMAAXAXAXAAAMMMMSAMXSMSXASMMSMSAMAMXMASAXXMAMAMAXXSMMSSSMMMXSAMSAMXSASXMMXMMAXAAAMMMMXMAXAXAAMSMMXSAAXAMXXSM\r\nMSMSSMMSASXXXAMXMMMAAMAMASMSMSMMMMXMSMSSMMMMMAAXXSAMXAMXXXXXXXXASMSMSXSMSMSASMSMMMSAMXAXMAMXMAMAXXASAMMMSAMMMSAMXSASMAMSMSSSMSXSXMASMSXSSMSA\r\nMAMXAAASASXASMXXXASXMMASXMAAAAMSASAXAAAXAMXMSMMMXMXXAAXSXSSXMAMXMASASASAAASAXAAMAAXAMMXXSASXSXMMSMMMSMAASASAAAASAMMASASAAXAXMXAMMSMMMXMAMAXS\r\nMASXSMMSXXMASAASXMSAMSAMAMSMXMMSASMSMMMXSAMXSAXSAMSSSMAXSAMXMASAMXMAMAMXMXMAMSSSMSSMMSAASASAMSAMXMMAMSMXXAMMXSAMAXMMSXSMSMSMXMAXAAAMAMXMMMMM\r\nSMSMXXMXMXXMMMMMAAMAMMASMMMXSXAMAMXAMAAMMMAXMAXXAMAAAMAMMXMXMASMSMMSMXMAMAMXMAAAMAAMAMXMMAMAMXSAMXMAMMMSXAXXAXMSSMSXXAMMMAMXXXMXSXXMAXXXAXAS\r\nAXMMMASAMSAMXMASMMMSMSMMMAMMAMMXMAXXSMXSAMSXMSMSMMMSMMAXMASMMAMMAXMMASMMSAMSSMXMMMMMSSMXMXMXMAXXSASASAAMXMXMASAAAMXASXSASXSMSAAXAASXMMMSMSAS\r\nMAMAXMMASXASMMMXSXAAMAAAMSXMMAMAXAXXAMMSMSMXXAAAXAMAASXMSASMMSMSASMSAMAAXAMAXAASAMSAMXAAXMMAMXSXSASASMXSASXSAMMMSAMXMAAXSAAASXSXMXMAAXXAAMMM\r\nXASMSAMXMXXMAAMAMMSSMSSMXMAAXXSASMSMASAXMAMAMMSMSMXSXMMMMASAAAXMASASAMXMSXMXSMMXAAMXMASMSASAMMXAMXMAXMASASAMXSMSAASMMXMSMMMMMMMAXASMMMMMSMMS\r\nSMSASXSMMMSSSMMAXXAAAXXXAXAMXXMXSAAMAMMMMAXMAXAMXMAXMMAAMXXMASMMMMMMAMXXAASMSASMSMSAMMXXAMXMSSSMMAMXMMAMXMXMAMXMAMMASAXAXAMSAAXMMMSAXMAMXMAS\r\nAAMAMMXMAAAXAASXXMMXMMAMMSSMMAMAMMMMMAAAMASXMXAMXMASASMSXMASMXXSXAASAMMSMMSASAMAMXSASASMSMXSAMAASMSAXMAMSXMMSSMSSSSXMASXXSSSMSXSAAMMMSSSXSAS\r\nMAMMMMASXSMSSMMSSSMMSMXMAAAAXXMAMAXMSSSXSASMMSSMMMXSAMAMMMXMSMMMSXMMAXAMXXMXMSMXMASAMAMAAASMASXMMASMMSSMMAAAMAAAAXAMXXMMAXAMXMASMSXXXSAMAMXS\r\nXASMAMASXMXXMAMAXAAAMASMMSSMMMSMSMSMAAAAMXMAXAMAMSMMMMMMAMMAAXAMXMSSSMASXXSAXASAMXXMMAMXMSXSMMMAMAMMXMMASMMXSMMMSMMAMMAMXMAMAMMMAMAMXMAMSMAS\r\nMAMXAMXXAMAXXAMMSSMMSAMAAAAAXAAMAASMMSMSMMMMMXSAMAAAXAXXAMMSMSSSSXAAMXMXMASMSMSXSMSMSMSXMXMXMASAMXSXAASAMAXAMASXMAXXAMXMASXSASAMMMMMASAMXMAM\r\nMSMXMSMXXMASXMSXAXMXMMSXMSXMMSMSMAMAXMXXAASASASASMSXSAMMAXMXAXAAXMMSMASAMXMAAXXMMAAXAAMMMAAAMXMAAAMMSMMMSAMXSAMASMMMSSMSXSASASXSXMSSXSAMXMAS\r\nAAAXSAMXAMAXAAXMXMAMSASXMMASMMAMXMXSMXMMSMSASXSAMXMMSASXSMXMMMMMMMAAMASXSAMSMXSAMSMSSSMASASXSASXMMSAMMSMSMMMMAMMMAAAAAAMAMMMXMAXAXMAMXAMMMMA\r\nSMSMSAMMMMSMMMMMXSMAMASXMSASAMXMASAMXAXXXAMAMAMMMMMAMAMAMXMAMASAAMAMXXMAXAXXAASMMXAAAAXMMAMXXAMAMAMXSAAAMAXSSSMSSSMMSMMMMSXMAAAXMMMMAXAMXAAM\r\nXAAMMMMXSAMAXSXSAMAMMAMAXMASAMASAMXSSMMMMMMAMAMMAMXSMMMAMASMMAXMMMSSMSAXSXMMMMSMSMMMMMMSMXMMXMSSMMSASXMSMMMXAMAXAXMAMXAAAXASMMMXMAAXSASMSMSX\r\nMMMMASMXMASMMMAMMSSXMASMMMMMMMXMASAMXMASASMMSMMSASMXASXSSXSAMSSMSAMAAMAXSAXXSXSAXASXMSASMASAMMAXXXMMXAMXAXMMSMMMAMMSXMMMSMMMMAAAMSMMXAXAXAAA\r\nSAAMMSAAMAMXAMXMXXMASXXAXMAAAMMSMMMSAMMSASXMSAASASXSXMAAMXSAMXAXMAMMMMMMXAMAXAMAMXSMASAMSMSAXMAMSAMXMSMSMMSMMASMXMAAAMSMXMAASMSMXAMXMAMMMMMS\r\nSSMSXXMXMXSSXMXXMAMXMSSMSSSSMSAAAXAMAXAMAMAMMMMSAMAMXMSMSASAMMMMSMMASAXXXAMMMXMXMXXMAMXMAMMMMXSSXXXSXMAXMASASAMMAMMSSMAASAMXSXAMSMMAMAMMAMAM\r\nMXMSASXXXMXMAMXMMSAMXASXAAXAXMMMMMMSMMSSMSXMASXMMMAMAXAAMASAMXMAAASASAAMSXMAMMMSMXXMXSXSMSMAAXXMMXMXAMAMXXSXMAXSASXAXXMMMMXAMXMMXSSXSSSSSSSS\r\nAAXMASXMXAAMXSSMAXAAMASXMSMSMSSSMAXAMXXAXSAMASMMMSMSSXMXMXMAMXXSSMMXSMMXAAMMMSAAXXMMXMMSAAXASXSAAMAMXMSMXASXSSMSXSMMXXMMAXMSSSMAAMXAMAAXAAAM\r\nSSMMAMAMASMSAAAMAXMSAMMMXAAAAAAAAXSASMSMMSAMAXAAAAAMAMSXSXSXSMXXXMMMXAAXMMMSAMSSMSAMSAAMSMMMXAXXMASXMAXXXXMASXAXMXMAASMSXSXAAAMMSMXXMMMMMMMM\r\nXXASMSAMMMAMMMMMSMMAMAASMMSMMMSMMMMMXAAXASMMSMXMSSSMMMSAMAAAAXXSSMASXMMMXSXMAMXMAMAMMMMXAXXSMXMMMAMAMAMSXMMMMMSMMAMAMMAAAMMMAMXMAMSXMAMAAXXX\r\nMSMMAMMMAMSMSXSAAAMASXMSXAAAXAAMXAXAMSMMASAAMXMXAMAAXAMAMXMSMAMMASAMAAAAASXMXMAXSSSMMAMMXMSMAMSSMXSXMASMXMAMAAXASXSSSMSMSMSXAMAMAMSAMAMSMSAM\r\nAAMMSMASMSMAXAMMXMMXSXASMSMSMSSSSXSXXAAMAXMMSAMMASXMMMSAMXXAXMXSAMMSSMMMMSAASMSMAAAXMAMSAMAMMMAAXAXASXSAMMSMMMSAMAAAAAXAMASXASASXMSXMAXXAMAS\r\nSASAAMXMXAMSMMMSSMSMSMXSAXAMXXMAXASAMXXMMXSAMAMSMMAXAXSMMMMASXMMAMXAAXXMASMMXAMAMSMXSAMSASASAMSSMXSMMMSASAXASAMAMAMSMMMAMAMMAXXMAXMMSSSMASAM\r\nXXMXSXXXSMMXASAXMAAAXAMMAMXAAMMSMMMSAMXXSAMASMMXASXMSMMMAAMAMXMMMXMASASMAXAMMMMXMAXXMMMSAMXMMXMXMASXAASAMAXAMMSSMXAXAMXAMASXMMASXMAAXAAXXMXX\r\nXSSMMASMXMAMMMMSMSMSMAAMAMXMAMAXASAAMSAMMASAMXXSAMXMAMASMSMSXXAASAMMAMXMAMAMSXSXXXSMXMAMMXSXMAMAMXMXMXMXMXMSMMAMMSSSMMSXSAMAASAMASXSMSMMMMMS\r\nXXAAMAMAMSSMXAXMAXAMXXSXMMMSAMASAMSXXMAXSAMXXMAXMAXSASMSAMXAAXSMSASXAAXASXSASAXMSMMMSSSXSAMASXMXSAMXSAMXSAMAAMASAAXAMXSAMASXMMASAMXMAAAAAXAA\r\nXSMMMAMMMAAMSSSMMMMMAAMASAASXSAMXMXXMSMMMXSAASXXSMASASAMXMMMXMMASAMXXMXMMMMAMAMAAAXAAAXAMASMMSAMSASASAMXSASXSMAMMSXXMAMXMAMAASAMXSAMXSSMMMSS\r\nAAAXSMSMMMXMXAAMSAMXSMSAMMXMAMAMXXXMMAAMXAMXMMAASAMMAMXMXMASXMMAMAMXSMMMAXMXMSASMXMMMMMXMAXXAMMASXMASXMXSXMXAMASXMMMMSSMSAMMMMXSASMSAXAXXXAX\r\nSSMMXAAXMASXXSMMSASAMXMAMSAMXMAMXMSAMAMMMXMXSMMMMAMXXXAMXSASAAMXMXMAAAAMSXSAAXMXMXSMMMSAMXXMSMMMMXMXMMSAMXMXMSXSAMASAAAMSSMSSSXMMSXMXMAMMAMX\r\nXAMXMSMSMMXMAXAXSXMAMASAMXMXAAASAAASMSSSXSSXMASASXMAMSASAMASXMMSSMMSSSMMXASMSMAMXAAAAXSASMMMMASXMAXAAXAXXAMAMMMSMMMMMSMMXAXAAXAAXSXSSMAMXSXM\r\nXSMSAAMAXMAMXMMMSXMAMAMXXAXMASASMSMXXMAMAASASASMSAMXMAMAAMAMAXAXAXAXMAXAMAMMMAASMSSSMXMMAAXAXAMASAMSSMMMMXMASAAMASXAMMXSMMMMSMMSMMAAXMXMAMAM\r\nSMASMXSAXMASAMMXMASAMSSSSXSAMXAXAAAXAAAMMMSXMASMSMMMMASXMMSSSMSSMMSMSSMMSASXMSASAMAMXXSSMXMMSXSAMXMMAMAAXMSASXMMAMXXXAMMAAAAAAAAAMMMXMAMASAM\r\nAMAMMMMMXSASAMAASMMMSXAAXMAXMSMMAMMXMMXSMAXAMXMAXXAAAAXASXAAMAXAXAAMMMMXSASAMXMMXMASMXMASXAMAXSMSMXSASMXSAAXMMXMXSMSMMAMSMMSSXMMXXMSASASMSXS\r\nMMASAXAAMMXMXXSMMAAXXMMMMSMAMAAASXSXXSMMMMSSMSMMSSXSMMSAMXMMSSSSMSXSAAXAMXMMMAAXXMAMMMMAAMSMXXMASAMSAMASMXMASXMSXAAXAMSAMAXMAMSXSMMSASASASMS\r\nXSASMSMSSMMMSXMASXMXXXAAMAXMSSMMMAXMAMAASMAMMXAXXAMMAMMASXXXAXMAXAMSXMXAMXMXSXSMSMMMXXMXMSAMXXMAMAXMAMXASAXMXMAMMMMMXMAASAMMAMMAASAMXMXMAMAM\r\nXMAXAMAMAMAAAAMAMMAMSSSMSAMMAMAAMMMSSSMMXMAMSSXMMMASAXXAMAXMASMMMSMSAMMAMSAMXXMAAAAAMXSMMSASMMMSSMMSMMXMSMSMSMMSASMSSMMMMXXXXMMMMMMXAAXSAMMM\r\nSMSMSMAXMSMSSMMMSMAMXAMXMMMMASXMMSAAAMXSMMSSMMMMAMMSMSMASXMASAAMXMAMAMXSAXSAMXSSSMMSAMXAAXAMXAMMAMMASAMXSXAAAAMSMSAAAMXSASMSXMXSASXSXSASMSXX\r\nXAAAXXMMXXAAAAAAAXAMXAMXMMAMAMASMMMSSMXXAMMAAXAXASASAAXXMMMSMXXMAMAMXSMAAXAXSAMAXAAXMXSMMSMXSSSMAMMASXSAMSSSMSMMXMMMXSAMMSAAAMASXSAAAMXMAMMM\r\nMSMSMASMSMMMSSMSXSSSSXMSMSASASAMXAAAAXMAMSSSMSSSMSMMSMSXMASASASXMSXSAMXMMMMMMASAMMXMSMAMAAMXXMAMXSMMMMMAXAXAAXXMASAAAMASXXMSSMASAMXMXMSMSXAA\r\nAXSXXMAAMXSXXMAXASAMXAAXASASXSAXXMMSSSXSXMAMAAAAASXXAMAMSMSASMAAAXAMXXXMAXAAXAMXXXMMXSASMXSASMSMAMXMASXMMXSMXMASASMSSSSMMAMAXMXMAMAXAXAAXXSM\r\nXSAMXXMXMAAAMAAMXMASXXMMMMAMASXMSMAAAAAMMMAMXMXMMMXSAMXMAMMAMXSMMMXMSAMSASXMSAMAMSMMASXSAAXXAAAMASMSMSAAXMXXASMMAMXXAMXASXMASMSAMXMSXSAMXXMM\r\nMMMMMXXAMSSXAMXMSSSMMAAXXMXMAMXMAMMSSMXMASMSXXXSXSXSXMAXAXMXMAMMXSXAMMAAXMAMMXMAMAAMAMXMMMMSMXMXAMXAASMMMMMSASXSMSMMSASMMSMAXAMAMMMAXSAMSAMX\r\nSASASXMMXAXXMXSSMXMAXSAMXMXMAMMSAMXXXXXSAMAAAMXMASAXAXSSSXSAMXSXAMMMMXSXXMXMMSSSSXSMSSXXAAAXAASMSMSMXMMMXAAMXMAXAAAAAMXAASMMSSMMMAMMXSAMMAMM\r\nSASASMSSSMMSMMMAMMSAMAMSAMXSASAAASMMAXAMMSXMASAMAMMSSMMAAAMASAXMASAMSAMMSMMAAXAAAAXAMXMMSSSMXMSAAAXMXAAMSSXSSXAMSMMMSSSMMMMAAMASASMMAMSMXAMX\r\nMAMMMAAAAXAAAASAMAMSSXMAXXMSASXMSAASAMXMASAXXAAMXSAAAAMMMMSAMXSAXSASMAMSAASMMSMMMMMAMXAAXAAAXXMMMSMSSMMMAMXXAMMXAAMAAXAXMAMMMSAMAXAMXSAMSXSX\r\nMXMSMSMSMMSSSMSASAMXMASMXSXMAMXXMXXMXXMAMSAMXSMMMMMSSXMXXMAMXXSAMMMMMXMMSXMAMSXXMMSSMXSSMSMMXXSSXXAXAMXMASXMASXSSSMMSSSMSASAXMASXSSMMSXMSAMX";
        public string ExampleInput = "MMMSXXMASM\r\nMSAMXMSMSA\r\nAMXSXMAAMM\r\nMSAMASMSMX\r\nXMASAMXAMM\r\nXXAMMXXAMA\r\nSMSMSASXSS\r\nSAXAMASAAA\r\nMAMMMXMMMM\r\nMXMXAXMASX";

        public string debugInput = "MXMXMAMXAXMSMMM\r\nSMMAMXMSAMXAAAA\r\nAMSMSMXXAAXXSMS\r\nMMMAAAMMSSSMXAX\r\nXMMSMMAXAAAASAM\r\nMXMXMASMMSMMMAM\r\nAAMXMMXAXMAMSAM\r\nSXSAMSSSMSXMSAS\r\nMAMMSAAMAXSAMXM\r\nXAMXMMSMSMXMASX\r\nXMXXXXAAXXXMAMM\r\nXSASMSMSMSMMAMA\r\nXAAMAAAAAXXMASM\r\nSMSMSSSMSMSMASM\r\nXXXAAAMXMAAMSMM";
        public string debugInput_2 = "MMMSXXMASM\r\nMSAMXMSMSA\r\nAMXSXMAAMM\r\nMSAMASMSMX\r\nXMASAMXAMM\r\nXXAMMXXAMA\r\nSMSMSASXSS\r\nSMXAMASAAA\r\nMAMMMXMMMM\r\nMXMXAXMASX";
        public string debugInput_3 = "1AAAAAAAAAAAAAAA\r\n1BBBBBBBBBBBBBBB\r\n1CCCCCCCCCCCCCCC\r\n1DDDDDDDDDDDDDDD\r\n1EEEEEEEEEEEEEEE\r\n1FFFFFFFFFFFFFFF\r\n1GGGGGGGGGGGGGGG\r\n1HHHHHHHHHHHHHHH\r\n1IIIIIIIIIIIIIII\r\n1JJJJJJJJJJJJJJJ\r\n1KKKKKKKKKKKKKKK\r\n1LLLLLLLLLLLLLLL\r\n1MMMMMMMMMMMMMMM\r\n1NNNNNNNNNNNNNNN\r\n1OOOOOOOOOOOOOOO\r\n1PPPPPPPPPPPPPPP";
        public string debugInput_4 = "1ABC\r\n2ABC\r\n3ABC\r\n4ABC";
        public void Run()
        {
            //SolvePart1();
            SolvePart2();
        }

        public void SolvePart1()
        {
            var representation = parseInput(InputStr);

            Func<List<char>, int> matcher = (List<char> input) =>
            {
                return (Regex.Matches(string.Join("", input), @"XMAS").Count + Regex.Matches(string.Join("", input), @"SAMX").Count);
            };

            var matches = representation.findMatch(matcher);
            Console.WriteLine($"[Day 4 - Part 1]\nfound 'XMAS' {matches} times");
        }

        public void SolvePart2()
        {
            var representation = getDiagonalsWithCoordinates(InputStr);
            int matches = 0;

            // find all occurences of 'A' in diags_r
            List<Tuple<int, int>> coordinatesOfInterest = new List<Tuple<int, int>>();

            foreach (var diagonal in representation.diagonals_R)
            {
                foreach (var entry in diagonal)
                {
                    if (entry.Value.Equals('A'))
                    {
                        // check if the A is not at the edge
                        if (entry.Key.Item1 > 0 && entry.Key.Item2 > 0 && entry.Key.Item1 < representation.maxX - 1 && entry.Key.Item2 < representation.maxY - 1)
                        {
                            // check if the a is part of "MAS"
                            var prev = new Tuple<int, int>(entry.Key.Item1 + 1, entry.Key.Item2 - 1);
                            var next = new Tuple<int, int>(entry.Key.Item1 - 1, entry.Key.Item2 + 1);

                            if ((diagonal[prev].Equals('S') && diagonal[next].Equals('M')) || (diagonal[prev].Equals('M') && diagonal[next].Equals('S')))
                            {
                                coordinatesOfInterest.Add(entry.Key);
                            }
                        }
                    }
                }
            }

            // find all occurences in diagonals L and check whether the diagonal has MAS|SAM in the same position
            foreach (var diagonal in representation.diagonals_L)
            {
                foreach (var entry in diagonal)
                {
                    foreach (var coord in coordinatesOfInterest)
                    {
                        if (entry.Key.Equals(coord) && entry.Value.Equals('A'))
                        {
                            // matched diagonal => check for sam|mas
                            // check if the a is part of "MAS"
                            var prev = new Tuple<int, int>(entry.Key.Item1 - 1, entry.Key.Item2 - 1);
                            var next = new Tuple<int, int>(entry.Key.Item1 + 1, entry.Key.Item2 + 1);
                            if ((diagonal[prev].Equals('S') && diagonal[next].Equals('M')) || (diagonal[prev].Equals('M') && diagonal[next].Equals('S')))
                            {
                                matches++;
                            }
                        }
                    }
                }
            }

            Console.WriteLine($"[Day 4 - Part 2]\nfound 'XMAS' {matches} times");
        }

        private WordSearchRepresentation parseInput(string input)
        {
            var rows = input.Replace("\r", "").Split('\n').Select(line => line.ToCharArray().ToList()).ToList();

            // get columns
            var rowLenght = rows[0].Count();
            var columns = new List<List<char>>(new List<char>[rowLenght]);

            for (var rowIdx = 0; rowIdx < rows.Count; rowIdx++)
            {
                for (var j = 0; j < rowLenght; j++)
                {
                    // init list if neccesary
                    if (columns[j] == null)
                    {
                        columns[j] = new List<char>();
                    }

                    // insert char
                    columns[j].Add(rows[rowIdx][j]);
                }
            }

            // get diagonals left to right (diagonals_R)
            var diagonalsR = new List<List<char>>();
            var colLength = columns[0].Count(); // maximum value downwards
            var i = 0;
            while (true)
            {

                var x = i < colLength ? i : colLength - 1;
                var y = i < colLength ? 0 : Math.Abs(colLength - 1 - i);


                var diagonal = new List<char> { rows[x][y] };

                // check whether we have reached the last diagonal
                if (x == colLength - 1 && y == rowLenght - 1)
                {
                    diagonalsR.Add(diagonal);
                    break;
                }

                // check if we can add the next element
                while (x - 1 >= 0 && y + 1 < rowLenght)
                {
                    // get the char towards the top-right
                    diagonal.Add(rows[--x][++y]);

                }

                // diagonal is full; start a new one
                diagonalsR.Add(diagonal);
                i++;
            }

            // get diagonals right to left (diagonals_L)
            var diagonalsL = new List<List<char>>();
            i = 0; // rest the index
            while (true)
            {
                var x = i < rowLenght ? 0 : Math.Abs(rowLenght - 1 - i);
                var y = i < rowLenght ? rowLenght - 1 - i : 0;

                var diagonal = new List<char> { rows[x][y] };

                // check whether we have reached the last diagonal
                if (x == colLength - 1 && y == 0)
                {
                    diagonalsL.Add(diagonal);
                    break;
                }

                // check if we can add the next element
                while (x + 1 < colLength && y + 1 < rowLenght)
                {
                    // get the char towards the top-right
                    diagonal.Add(rows[++x][++y]);
                }

                // diagonal is full; start a new one
                diagonalsL.Add(diagonal);
                i++;
            }

            return new WordSearchRepresentation(columns, rows, diagonalsR, diagonalsL);
        }

        private RichWordSearchRepresentation getDiagonalsWithCoordinates(string input)
        {
            var rows = input.Replace("\r", "").Split('\n').Select(line => line.ToCharArray().ToList()).ToList();

            // get columns
            var rowLenght = rows[0].Count();
            var columns = new List<List<char>>(new List<char>[rowLenght]);

            for (var rowIdx = 0; rowIdx < rows.Count; rowIdx++)
            {
                for (var j = 0; j < rowLenght; j++)
                {
                    // init list if neccesary
                    if (columns[j] == null)
                    {
                        columns[j] = new List<char>();
                    }

                    // insert char
                    columns[j].Add(rows[rowIdx][j]);
                }
            }

            // get diagonals left to right (diagonals_R)
            var diagonalsR = new List<Dictionary<Tuple<int, int>, char>>();
            var colLength = columns[0].Count(); // maximum value downwards
            var i = 0;
            while (true)
            {

                var x = i < colLength ? i : colLength - 1;
                var y = i < colLength ? 0 : Math.Abs(colLength - 1 - i);

                var diagonal = new Dictionary<Tuple<int, int>, char>
                {
                    {new Tuple<int, int>(x, y),rows[x][y] }
                };

                // check whether we have reached the last diagonal
                if (x == colLength - 1 && y == rowLenght - 1)
                {
                    diagonalsR.Add(diagonal);
                    break;
                }

                // check if we can add the next element
                while (x - 1 >= 0 && y + 1 < rowLenght)
                {
                    // get the char towards the top-right
                    diagonal.Add(new Tuple<int, int>(--x, ++y), rows[x][y]);

                }

                // diagonal is full; start a new one
                diagonalsR.Add(diagonal);
                i++;
            }

            // get diagonals right to left (diagonals_L)
            var diagonalsL = new List<Dictionary<Tuple<int, int>, char>>();
            i = 0; // rest the index
            while (true)
            {
                var x = i < rowLenght ? 0 : Math.Abs(rowLenght - 1 - i);
                var y = i < rowLenght ? rowLenght - 1 - i : 0;

                //var diagonal = new List<char> { rows[x][y] };
                var diagonal = new Dictionary<Tuple<int, int>, char>
                {
                    {new Tuple<int, int>(x, y),rows[x][y] }
                };

                // check whether we have reached the last diagonal
                if (x == colLength - 1 && y == 0)
                {
                    diagonalsL.Add(diagonal);
                    break;
                }

                // check if we can add the next element
                while (x + 1 < colLength && y + 1 < rowLenght)
                {
                    // get the char towards the top-right
                    diagonal.Add(new Tuple<int, int>(++x, ++y), rows[x][y]);
                }

                // diagonal is full; start a new one
                diagonalsL.Add(diagonal);
                i++;
            }

            return new RichWordSearchRepresentation(diagonalsR, diagonalsL, colLength, rowLenght);
        }
    }


    internal class WordSearchRepresentation
    {
        public List<List<char>> columns;
        public List<List<char>> rows;
        public List<List<char>> diagonals_R; // lower col nr -> larger col nr
        public List<List<char>> diagonals_L; // larger col nr -> lower col nr

        public WordSearchRepresentation(List<List<char>> columns, List<List<char>> rows, List<List<char>> diagonals_R, List<List<char>> diagonals_L)
        {
            this.columns = columns;
            this.rows = rows;
            this.diagonals_R = diagonals_R;
            this.diagonals_L = diagonals_L;
        }

        public int findMatch(Func<List<char>, int> matchFunction)
        {
            var matches = 0;

            columns.ForEach(col => matches += matchFunction(col));
            rows.ForEach(col => matches += matchFunction(col));
            diagonals_L.ForEach(col => matches += matchFunction(col));
            diagonals_R.ForEach(col => matches += matchFunction(col));


            return matches;
        }
    }

    internal class RichWordSearchRepresentation
    {
        // diagonals with coordinates
        public List<Dictionary<Tuple<int, int>, char>> diagonals_R;
        public List<Dictionary<Tuple<int, int>, char>> diagonals_L;

        public int maxX;
        public int maxY;

        public RichWordSearchRepresentation(List<Dictionary<Tuple<int, int>, char>> diagonals_R, List<Dictionary<Tuple<int, int>, char>> diagonals_L, int maxX, int maxY)
        {
            this.diagonals_R = diagonals_R;
            this.diagonals_L = diagonals_L;
            this.maxX = maxX;
            this.maxY = maxY;
        }
    }
}
